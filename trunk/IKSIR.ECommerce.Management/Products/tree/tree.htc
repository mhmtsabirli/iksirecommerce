<public:component lightweight="true">
<public:attach event="onclick" onevent="mouseDown( window.event.srcElement )"/>
<public:attach event="ondblclick" onevent="DoubleClick()"/>
<public:attach event="onmouseover" onevent="On()"/>
<public:attach event="onmouseout" onevent="Off()"/>
<public:attach event="onkeydown" onevent="keyDown()"/>
<public:attach event="" onevent="handleDrag()"/>
<public:method name="Clear" />

<script language="JavaScript">

// init node vars
var oLastNode		= null;
var olastNodeSel	= null;

var _oLastNode, _oLastGlow;


// init xml & set synchronous
var xmlItems	= new ActiveXObject( "Msxml.DOMDocument" );
xmlItems.async	= false;

// cache expanded & collapsed icons
var icoExp		= new Image();
var icoCol		= new Image();
var icoEmpty	= new Image();

icoExp.src		= "tree/ico_Plus.gif";
icoCol.src		= "tree/ico_Minus.gif";
icoEmpty.src	= "tree/ico_Dot.gif";

function Clear()
{
	if (olastNodeSel)
	{
		style( olastNodeSel );
	}

	olastNodeSel = null;
}

function keyDown()
{
	if (!_oLastNode)
	{
		try
		{
			mouseDown(this.firstChild.firstChild.rows[0].cells[1].firstChild, true);

			// Hide "Tab" Focus
			this.firstChild.firstChild.rows[0].cells[1].firstChild.focus();
		}
		catch (e)
		{}
	}
	
	switch( event.keyCode )
	{
		case 13:
			
			if (_oLastNode)
			{
				window.applychanges();
			}
			break;

		case 37 : // left key
			
			if (_oLastNode.isExpanded)
			{
				_oLastNode.cells[0].click();
			}
			break;

		case 39 : // right key
			
			if (!_oLastNode.isExpanded)
			{
				_oLastNode.cells[0].click();
			}
			break;

		case 38 : // Up key
			
			if (_oLastNode.previousSibling)
			{
				if (_oLastNode.previousSibling.isExpanded)
				{
					mouseDown(_oLastNode.previousSibling.cells[1].lastChild.firstChild.lastChild.cells[1].firstChild, true);
				}
				else
				{
					mouseDown(_oLastNode.previousSibling.cells[1].firstChild, true);
				}
			}
			else if (_oLastNode.parentElement.parentElement.parentElement.parentElement.isExpanded)
			{
				mouseDown(_oLastNode.parentElement.parentElement.parentElement.firstChild, true);
			}

			break;
				
		case 40 : // Down key
			
			if (_oLastNode.isExpanded)
			{
				var o = _oLastNode.cells[1].lastChild;
				
				if (o.tagName == "TABLE")
				{
					mouseDown(o.rows[0].cells[1].firstChild, true);
				}
			}
			else
			{
				if (_oLastNode.nextSibling)
				{
					mouseDown(_oLastNode.nextSibling.cells[1].firstChild, true);
				}
				else if (_oLastNode.parentElement.parentElement.parentElement.parentElement.nextSibling)
				{
					mouseDown(_oLastNode.parentElement.parentElement.parentElement.parentElement.nextSibling.cells[1].firstChild, true);
				}
			}
			break;
	}
}


function DoubleClick()
{
	// Cancel the event if this is an image so the attachee doesn't need to do the work
	event.cancelBubble = (event.srcElement.tagName == "IMG");
}


function mouseDown(o, bDoNotExpand)
{

	var bSelect = false;
	
	if (o.className == "TreeContainer")
	{
		return false;
	}

	switch (o.tagName)
	{
		case "SPAN": bSelect = true;
		case "IMG": o = o.parentElement;
		case "TD" : o = o.parentElement;	
	}
	
	window.frameElement.selectedId=o.itemId;
	window.frameElement.selectedName = o.cells[1].firstChild.innerText
	
	if (o.tagName == "DIV")
	{
		return false;
	}
	
	if (!bDoNotExpand)
	{
		if (o.isExpanded)
		{
			o.isExpanded = false;
			o.cells[0].firstChild.src = icoExp.src;

			// hide child items
			o.cells[1].lastChild.style.display = "none";
		}
		else
		{
			if (o.cells[1].children.length > 1)
			{
				o.cells[1].lastChild.style.display = "block";
				o.cells[0].firstChild.src = icoCol.src;
				o.isExpanded = true;
			}
			else
			{
				// retrieve child items
				xmlItems.load("Categories.aspx?ParentId=" + o.itemId );
				
				var oXslDoc = new ActiveXObject("Msxml2.FreeThreadedDOMDocument");
				oXslDoc.async = false;
				oXslDoc.resolveExternals = false;
				oXslDoc.load( "tree/tree.xsl" );

				var oXslt = new ActiveXObject("Msxml2.XSLTemplate");
				oXslt.stylesheet = oXslDoc;

				_oXslProc = oXslt.createProcessor();
				_oXslProc.input = xmlItems;
				_oXslProc.transform();
				if( xmlItems.xml  )
				{
					o.isExpanded = true;
					o.cells[0].firstChild.src = icoCol.src;
				}
				else
				{
					o.cells[0].firstChild.src = icoEmpty.src;
				}

				// render child items
				o.cells[1].insertAdjacentHTML( "beforeEnd",_oXslProc.output);
			}
		}
	}

	if (bSelect)
	{
		// change node styles
		style( o.cells[1].firstChild, "On" );

		// turn off last selected node
		if( olastNodeSel && olastNodeSel != o.cells[1].firstChild )
		{
			style( olastNodeSel );
		}

		// pointers to this node
		oLastNode	= o.cells[1].firstChild;
		olastNodeSel = o.cells[1].firstChild;

		// set tree's item
		item = new TreeItem( o.itemId, o.cells[1].firstChild.innerText );
	}
	
	if (bDoNotExpand)
	{
		o.scrollIntoView();
	}

	_oLastNode = o;
}


function TreeItem( id, name )
{
	this.Id		= id;
	this.Name	= name;
}


function On()
{
	var o = event.srcElement;

	if (o.tagName == "SPAN")
	{
		o.runtimeStyle.backgroundColor = "#ADC3E7";
		_oLastGlow = o;
	}
}


function Off()
{
	if (_oLastGlow)
	{
		_oLastGlow.runtimeStyle.backgroundColor = "";
	}
}


function style(node, node_style)
{
	node.className = "TreeItem" + ((node_style) ? " " + node_style : "");
}

function handleDrag()
{
	event.returnValue = false;
}
</script>
</public:component>